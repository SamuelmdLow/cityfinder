# main.py'''Title: City FinderClient: Willian LiAuthor: Samuel LowDate Created: 19/6/2021'''# ---LIBRARIES--- #import pathlibimport wikipedia# ---CREATE FULL CITY INFO CSV FILE---## INPUT# read data from CSV filesdef getData(FILENAME):    '''    extract data from file and process into 2D arrays    :param FILENAME: (string)    :return: (list)    '''    FILE = open(FILENAME, encoding="ISO-8859-1")    # open file    RAW_DATA = FILE.readlines()     # separate the content of the file by lines    FILE.close()    # close the file    for i in range(len(RAW_DATA)):  # for each line in the original file        RAW_DATA[i] = RAW_DATA[i][:-1]  # remove the last character (\n)        RAW_DATA[i] = RAW_DATA[i].split(',')    # split the line by each comma (CSV)    return RAW_DATA# PROCESSING# add the data from the climate csv file to the full city arraydef addClimate(CLIMATE_LIST, FULL_LIST):    '''    Add the information from "climate.csv" to the full list of city information    :param CLIMATE_LIST: (list) list containing climate information    :param FULL_LIST: (list) full list of city information    :return: (list) Updated list of city information    '''    global CITY_LIST    # List of all cities in the city information database    CLIMATE_LIST.pop(0)     # Remove the header of the table    CITY = None    for item in CLIMATE_LIST:   # for each item in the CLIMATE_LIST array        if CITY != item[3]:     # if a new city has been reached in the data            if CITY != None:    # if this is not the first time in the for loop                if MONTHS == 0:     # if                    AVERAGE = None                else:                    AVERAGE = round(SUM/MONTHS,1)                LOW     = convertToCelcius(LOW)                HIGH    = convertToCelcius(HIGH)                AVERAGE = convertToCelcius(AVERAGE)                CITY_INFORMATION    = [CITY, None, COUNTRY, LOW, HIGH, AVERAGE, None, None, None, None]                FULL_LIST.append(CITY_INFORMATION)                CITY_LIST.append(CITY+"_"+COUNTRY)            CITY    = item[3]            COUNTRY = item[1]            if COUNTRY == "US":                COUNTRY = "United States"            LOW     = None            HIGH    = None            MONTHS  = 0            SUM     = 0        TEMPERATURE = float(item[7])        if TEMPERATURE != -99.0:            MONTHS  = MONTHS + 1            SUM     = SUM + TEMPERATURE            if LOW  == None:                LOW     = TEMPERATURE            elif LOW  >  TEMPERATURE:                LOW     = TEMPERATURE            if HIGH == None:                HIGH    = TEMPERATURE            elif HIGH < TEMPERATURE:                HIGH    = TEMPERATURE    return FULL_LIST# add the data from the population and coordinates csv file to the full city arraydef addPopCords(POP_CORDS_LIST, FULL_LIST):    '''    Add the information from "PopulationAndCords.csv" to the full list of City information    :param POP_CORDS_LIST: (list) list containing information from "PopulationAndCords.csv"    :param FULL_LIST: (list) combined list of City information    :return: (list) updated combined list of city information    '''    global CITY_LIST    POP_CORDS_LIST.pop(0)    for item in POP_CORDS_LIST:        CITY = item[1][1:-1]        try:            POPULATION = int(item[9][1:-1])        except:            POPULATION = None        LATITUDE    = item[2][1:-1]        LONGITUDE   = item[3][1:-1]        PROVINCE    = item[7][1:-1]        COUNTRY = item[4][1:-1]        CODE = CITY+"_"+COUNTRY        if CODE in CITY_LIST:            INDEX = CITY_LIST.index(CODE)            FULL_LIST[INDEX][1] = PROVINCE            FULL_LIST[INDEX][6] = LATITUDE            FULL_LIST[INDEX][7] = LONGITUDE            FULL_LIST[INDEX][8] = POPULATION        else:            INFORMATION = [CITY, PROVINCE, COUNTRY, None, None, None, LATITUDE, LONGITUDE,POPULATION, None]            FULL_LIST.append(INFORMATION)            CITY_LIST.append(CODE)    return FULL_LIST# add the data from the university ranking csv file to the full city arraydef addUniversities(UNIVERSITY_LIST, FULL_LIST):    '''    Add the information from "CityUniversityRankings.csv" to the combined list of City information    :param UNIVERSITY_LIST: (list) list containing information from "CityUniversityRankings.csv"    :param FULL_LIST: (list) combined list of City information    :return: (list) updated combined list of city information    '''    global CITY_LIST    rank = 1000    for UNI in reversed(UNIVERSITY_LIST):        if UNI[0] in CITY_LIST:            INDEX = CITY_LIST.index(UNI[0])            FULL_LIST[INDEX][9] = rank        rank = rank - 1    return FULL_LIST# add a unique code representing the city to the full city arraydef addCode(FULL_LIST):    '''    Add an individual    :param FULL_LIST:    :return:    '''    for i in range(len(FULL_LIST)):        CITY = FULL_LIST[i][0]        while " " in CITY:            CITY = CITY[0:CITY.index(" ")] + CITY[CITY.index(" ")+1:len(CITY)]        if FULL_LIST[i][1] != None:            PROV = FULL_LIST[i][1][0:3]        else:            PROV = ""        if " " in FULL_LIST[i][2]:            COUN = FULL_LIST[i][2][0]+FULL_LIST[i][2][FULL_LIST[i][2].index(" ")+1]        else:            COUN = FULL_LIST[i][2][0:3]        FULL_LIST[i].append(CITY+PROV+COUN)    return FULL_LIST# OUTPUT# write the contents of the full city array to a CSV filedef createFullCityInfoCSVFile():    '''    Create a CSV file of the combined city information    :return:    '''    global FULL_CITY_CSV    global FULL_LIST    SAVED_FILE = open(FULL_CITY_CSV, "w", encoding="utf-8")    SAVED_FILE.write("CITY, PROVINCE/STATE, COUNTRY, LOW TEMP, HIGH TEMP, AVERAGE TEMP, LATITUDE, LONGITUDE, POPULATION, UNIVERSITY RANKING, CODE\n")    for i in FULL_LIST:        data = ""        for a in i:            data = data + str(a) + ","        data = data + "\n"        SAVED_FILE.write(data)    SAVED_FILE.close()# SUBROUTINES RELATED TO FILTERING CITIES# convert the list of filters into a readable form for displayingdef getSpecifications(FILTERS):    DISP_FILTERS = []    TYPES = ["City", "Province/State", "Country", "Lowest Temperature (C°)","Highest Temperature (C°)", "Average Temperature (C°)", "Latitude", "Longitude", "Population", "University ranking"]    for item in FILTERS:        if item[0] == 9:            DISP_FILTERS.append(TYPES[item[0]] + " is in the top " + str(item[2]))        else:            DISP_FILTERS.append(TYPES[item[0]] + " is between " + str(item[1]) + " and " + str(item[2]))    return DISP_FILTERS# obtain the list of cities that meet the parameters of the filterdef getEligibleCities(SPECIFICATIONS):    global FULL_LIST    ELIGIBLE_CITIES = []    for CITY in FULL_LIST:        ELIGIBLE = True        for SPEC in SPECIFICATIONS:            try:                if CITY[SPEC[0]] != "None":                    VALUE = float(CITY[SPEC[0]])                    if SPEC[1] < VALUE < SPEC[2]:                        pass                    else:                        ELIGIBLE = False                else:                    ELIGIBLE = False            except:                pass        if ELIGIBLE == True:            ELIGIBLE_CITIES.append([CITY[0],CITY[2],CITY[-2]])    return ELIGIBLE_CITIES# organize the cities into groups of countries for displayingdef getDisplay(ELIGIGBLE_CITIES):    COUNTRIES   = []    CITIES      = []    for city in ELIGIGBLE_CITIES:        if city[1] in COUNTRIES:            CITIES[COUNTRIES.index(city[1])].append([city[0],city[2]])        else:            COUNTRIES.append(city[1])            CITIES.append([[city[0],city[2]]])    return [COUNTRIES, CITIES]# locate the index of a city by it's IDdef getCity(CODE):    global FULL_LIST    INLIST = False    INDEX = 0    for i in FULL_LIST:        if i[-2] == CODE:            INLIST = True            break        INDEX = INDEX + 1    if INLIST == True:        print(FULL_LIST[INDEX])        return FULL_LIST[INDEX]    else:        return None# arrange the information from a city in the city array into a paragraph for displayingdef getCityInformation(CITYINFO):    '''    print the available information about a city to the user    :param FULL_LIST: (list) combined list of City information    :return:    '''    if CITYINFO != None:        CITY        = CITYINFO[0]        PROVINCE    = CITYINFO[1]        COUNTRY     = CITYINFO[2]        LOW         = CITYINFO[3]        HIGH        = CITYINFO[4]        AVERAGE     = CITYINFO[5]        LATITUDE    = CITYINFO[6]        LONGITUDE   = CITYINFO[7]        POPULATION  = CITYINFO[8]        UNIVERSITY  = CITYINFO[9]        if UNIVERSITY[-1] == "1":            UNIVERSITY = UNIVERSITY + "st"        elif UNIVERSITY[-1] == "2":            UNIVERSITY = UNIVERSITY + "nd"        else:            UNIVERSITY = UNIVERSITY + "th"        SENTENCE = "\n" + CITY + " is in "        if PROVINCE != "None":            SENTENCE = SENTENCE + PROVINCE + ", " + COUNTRY + ".\n"        else:            SENTENCE = SENTENCE + " " + COUNTRY + ".\n"        if LATITUDE != "None":            SENTENCE = SENTENCE + "The city's coordinates are latitude: " + LATITUDE + " , longitude: " + LONGITUDE + ".\n"        if LOW != "None":            SENTENCE = SENTENCE + "The temperature can get as low as " + LOW + " C and as high as " + HIGH + " C.\n"            SENTENCE = SENTENCE + "The average yearly temperature is " + AVERAGE + " C.\n"        if POPULATION != "None":            SENTENCE = SENTENCE + "There are around " + POPULATION + " people in the city.\n"        if UNIVERSITY[0:-2] != "None":            SENTENCE = SENTENCE + "The city's top university is ranked " + UNIVERSITY + " in the world."        return SENTENCE    else:        return "Sorry! We have no information on this city."# convert Fahrenheit (useless unit) to Celciusdef convertToCelcius(Fahrenheit):    '''    Conver fahrenheit to a better unit of measurement (celcius)    :param Fahrenheit: (float) temperature in fahrenheit    :return: (float) temperature in celcius    '''    CELCIUS = round(((Fahrenheit - 32) * 5) / 9, 1)    return CELCIUS# get the wikipedia page and an image from the wikipedia page of a citydef getWikipedia(city):    try:        if city[0] == city[1] or city[1] == "None":            query = city[0] + ", " + city[2]        else:            query = city[0]+", "+city[1]+" "+city[2]        print(query)        result = wikipedia.search(query)        if len(result) > 0:            page = wikipedia.page(result[0]).html()            pag  = wikipedia.page(result[0]).url            term = 'class="image"'            if term in page:                start = page.index(term)                while page[start:start+4] != 'src=':                    start = start + 1                start = start + 4                end = start + 1                while page[end] != '"':                    end = end + 1                image = page[start+1:end]            else:                image = "None"        else:            pag   = "None"            image = "None"    except:        pag = "None"        image = "None"    print(image)    return [pag,image]# get the flag of the country of a specific citydef getFlag(city):    try:        country = city[2].lower()        if country == "united states":            flag = "https://cdn.countryflags.com/thumbs/united-states-of-america/flag-800.png"        else:            while " " in country:                country = country[0:country.index(" ")] + "-" + country[country.index(" ")+1:len(country)]            flag = "https://cdn.countryflags.com/thumbs/" + country + "/flag-800.png"    except:        flag  = "None"    print(flag)    return flag# VARIABLESCLIMATE_CSV     = "climate.csv"POP_CORDS_CSV   = "PopulationAndCords.csv"FULL_CITY_CSV   = "fullCityInfo.csv"UNIVERSITY_CSV  = "CityUniversityRankings.csv"FULL_LIST   = []CITY_LIST   = []FILTERS     = []# Get DataFIRST_RUN   =   Trueif (pathlib.Path.cwd() / FULL_CITY_CSV).exists():    FIRST_RUN   =   Falseif FIRST_RUN == True:    # Create a combined array of city information    CLIMATE_LIST    = getData(CLIMATE_CSV)    POP_CORDS_LIST  = getData(POP_CORDS_CSV)    UNIVERSITY_LIST = getData(UNIVERSITY_CSV)    FULL_LIST   = addClimate(CLIMATE_LIST, FULL_LIST)    del CLIMATE_LIST    FULL_LIST   = addPopCords(POP_CORDS_LIST, FULL_LIST)    del POP_CORDS_LIST    FULL_LIST   = addUniversities(UNIVERSITY_LIST, FULL_LIST)    del UNIVERSITY_LIST    FULL_LIST   = addCode(FULL_LIST)    createFullCityInfoCSVFile()else:    # Get city information from the saved CSV file    FULL_LIST = getData(FULL_CITY_CSV)    FULL_LIST.pop(0)'''REPEAT = True#print("CITY FINDER")    # Titlewhile REPEAT:    ### MAIN PROGRAM    SELECTION = menu() # present the user with ways to manipulate the city data    if SELECTION == "1":    # Add specification        FILTERS  = addSpecification(FILTERS)    elif SELECTION == "2":  # Remove Specifications        FILTERS = removeSpecifications(FILTERS)    elif SELECTION == "3":  # View Specifications        viewSpecifications()    elif SELECTION == "4":  # View Eligible Cities        ELIGIBLE_CITIES = getEligibleCities(FILTERS)        for CITY in ELIGIBLE_CITIES:            print(CITY)    elif SELECTION == "5":  # Get Information on a Specific City        getCityInformation(FULL_LIST)    else:                   # End Program        REPEAT = False'''